// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    PHARMACY_OWNER // Owns one or more pharmacies
    PHARMACIST // Can handle sales, inventory checks
}

model User {
    id                Int                 @id @default(autoincrement())
    username          String
    email             String              @unique
    password_hash     String
    role              UserRole
    created_at        DateTime            @default(now())
    pharmacy_id       Int
    Pharmacy          Pharmacy            @relation(fields: [pharmacy_id], references: [id])
    Notifications     Notification[]
    NotificationToken NotificationToken[]
}

//not created yet
model Pharmacy {
    id             Int             @id @default(autoincrement())
    name           String
    address        String
    contact_number String
    owner_id       Int?            @unique // Ensure one-to-one relationship
    Inventory      Inventory[]
    PurchaseOrders PurchaseOrder[]
    Sales          Sale[]
    User           User[]
}

//not created yet

model Warehouse {
    id             Int         @id @default(autoincrement())
    name           String
    address        String
    owner_id       Int?        @unique // Ensure one-to-one relationship
    contact_number String
    Inventory      Inventory[]
    supplier       Supplier[]
}

enum SupplierRole {
    SUPPLIER_ADMIN
    SUPPLIER_EMPLOYEE
}

model Supplier {
    id             Int             @id @default(autoincrement())
    name           String
    email          String          @unique
    password_hash  String
    role           SupplierRole
    contact_person String?
    phone          String
    address        String
    Medicines      Medicine[]
    PurchaseOrders PurchaseOrder[]
    Invoices       Invoice[]
    warehouseId    Int
    Warehouse      Warehouse       @relation(fields: [warehouseId], references: [id])
}

//not created yet

model Category {
    id          Int        @id @default(autoincrement())
    name        String     @unique
    description String?
    Medicines   Medicine[]
}

model Company {
    id             Int        @id @default(autoincrement())
    name           String     @unique
    contact_person String?
    phone          String
    email          String     @unique
    address        String
    Medicines      Medicine[]
}

model Medicine {
    id                 Int                 @id @default(autoincrement())
    name               String
    titer              String
    category_id        Int
    category           Category            @relation(fields: [category_id], references: [id])
    company_id         Int
    company            Company             @relation(fields: [company_id], references: [id])
    unit_price         Decimal
    supplier_id        Int
    supplier           Supplier            @relation(fields: [supplier_id], references: [id])
    Inventory          Inventory[]
    PurchaseOrderItems PurchaseOrderItem[]
    SaleItems          SaleItem[]
    Type               String?
}

enum LocationType {
    PHARMACY
    WAREHOUSE
}

model Inventory {
    id            Int          @id @default(autoincrement())
    medicine_id   Int
    medicine      Medicine     @relation(fields: [medicine_id], references: [id])
    location_type LocationType
    quantity      Int
    cost_price    Decimal // Purchase cost
    selling_price Decimal // Retail price
    expiry_date   DateTime
    last_updated  DateTime     @default(now())
    pharmacy_id   Int?
    pharmacy      Pharmacy?    @relation(fields: [pharmacy_id], references: [id])

    warehouse_id Int?
    warehouse    Warehouse? @relation(fields: [warehouse_id], references: [id])
}

model PurchaseOrder {
    id                 Int                 @id @default(autoincrement())
    supplier_id        Int
    supplier           Supplier            @relation(fields: [supplier_id], references: [id])
    pharmacy_id        Int
    pharmacy           Pharmacy            @relation(fields: [pharmacy_id], references: [id])
    order_date         DateTime            @default(now())
    delivery_date      DateTime?
    status             String
    Invoice            Invoice?
    PurchaseOrderItems PurchaseOrderItem[]
}

model PurchaseOrderItem {
    id          Int           @id @default(autoincrement())
    order_id    Int
    order       PurchaseOrder @relation(fields: [order_id], references: [id])
    medicine_id Int
    medicine    Medicine      @relation(fields: [medicine_id], references: [id])
    quantity    Int
    unit_price  Decimal
}

model Invoice {
    id             Int           @id @default(autoincrement())
    order_id       Int           @unique
    order          PurchaseOrder @relation(fields: [order_id], references: [id])
    supplier_id    Int
    supplier       Supplier      @relation(fields: [supplier_id], references: [id])
    invoice_date   DateTime      @default(now())
    total_amount   Decimal
    payment_status String
}

model Sale {
    id            Int        @id @default(autoincrement())
    pharmacy_id   Int
    pharmacy      Pharmacy   @relation(fields: [pharmacy_id], references: [id])
    customer_name String?
    sale_date     DateTime   @default(now())
    total_amount  Decimal
    payment_mode  String
    SaleItems     SaleItem[]
}

model SaleItem {
    id          Int      @id @default(autoincrement())
    sale_id     Int
    sale        Sale     @relation(fields: [sale_id], references: [id])
    medicine_id Int
    medicine    Medicine @relation(fields: [medicine_id], references: [id])
    quantity    Int
    unit_price  Decimal
    cost_price  Decimal
}

model Notification {
    id         Int      @id @default(autoincrement())
    user_id    Int
    user       User     @relation(fields: [user_id], references: [id])
    message    String
    type       String
    created_at DateTime @default(now())
    is_read    Boolean  @default(false)
}

model NotificationToken {
    id         Int      @id @default(autoincrement())
    user_id    Int
    token      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id])
}

// enum UserRole {
//   SUPER_ADMIN    // System-wide admin
//   PHARMACY_OWNER // Owns one or more pharmacies
//   PHARMACY_MANAGER // Manages a specific pharmacy
//   PHARMACIST     // Can handle sales, inventory checks
//   CASHIER        // Can only process sales
//   WAREHOUSE_MANAGER // Manages warehouse operations
// }

// model User {
//   id            Int            @id @default(autoincrement())
//   username      String         @unique 
//   email         String         @unique
//   password_hash String
//   role          UserRole       // Use enum instead of string
//   is_active     Boolean        @default(true) 
//   created_at    DateTime       @default(now())
//   updated_at    DateTime       @updatedAt 

//   
//   pharmacy_id   Int?
//   pharmacy      Pharmacy?      @relation(fields: [pharmacy_id], references: [id])
//   notifications Notification[]
//   sales         Sale[]         

//   @@map("users")
// }
// ```

// ### 2. **Pharmacy Model - Ownership Issues**
// **Current Issue**: `owner_id` field exists but no relation to User model.

// **Suggested Modification**:
// ```prisma
// model Pharmacy {
//   id             Int             @id @default(autoincrement())
//   name           String
//   address        String
//   contact_number String
//   license_number String?         @unique // Pharmacy license
//   is_active      Boolean         @default(true)
//   created_at     DateTime        @default(now())
//   updated_at     DateTime        @updatedAt

//   // Owner relationship
//   owner_id       Int
//   owner          User            @relation("PharmacyOwner", fields: [owner_id], references: [id])

//   // Other relationships
//   staff          User[]          @relation("PharmacyStaff")
//   inventory      Inventory[]
//   purchaseOrders PurchaseOrder[]
//   sales          Sale[]

//   @@map("pharmacies")
// }
// ```

// ### 3. **Inventory Model - Location Logic**
// **Current Issue**: Confusing location logic with conditional foreign keys.

// **Suggested Modification**:
// ```prisma
// enum LocationType {
//   PHARMACY
//   WAREHOUSE
// }

// model Inventory {
//   id            Int          @id @default(autoincrement())
//   medicine_id   Int
//   medicine      Medicine     @relation(fields: [medicine_id], references: [id])
//   location_type LocationType
//   location_id   Int
//   quantity      Int          @default(0)
//   reserved_qty  Int          @default(0) // Reserved for pending orders
//   expiry_date   DateTime
//   batch_number  String?      // Important for tracking
//   cost_price    Decimal      // Purchase cost
//   selling_price Decimal      // Retail price
//   reorder_level Int          @default(0) // Minimum stock level
//   last_updated  DateTime     @default(now()) @updatedAt

//   // Use a single relation approach
//   pharmacy      Pharmacy?    @relation(fields: [location_id], references: [id])
//   warehouse     Warehouse?   @relation(fields: [location_id], references: [id])

//   @@unique([medicine_id, location_type, location_id, batch_number])
//   @@map("inventory")
// }
// ```

// ### 4. **Medicine Model - Enhanced Structure**
// **Suggested Modification**:
// ```prisma
// enum MedicineType {
//   TABLET
//   CAPSULE
//   SYRUP
//   INJECTION
//   CREAM
//   DROPS
//   OTHER
// }

// model Medicine {
//   id                 Int                 @id @default(autoincrement())
//   name               String
//   generic_name       String?             // Generic equivalent
//   titer              String              // Strength/dosage
//   type               MedicineType?
//   description        String?
//   barcode            String?             @unique
//   requires_prescription Boolean          @default(false)
//   is_active          Boolean             @default(true)
//   created_at         DateTime            @default(now())
//   updated_at         DateTime            @updatedAt

//   // Relationships
//   category_id        Int
//   category           Category            @relation(fields: [category_id], references: [id])
//   company_id         Int
//   company            Company             @relation(fields: [company_id], references: [id])
//   base_price         Decimal             // Base unit price

//   // Remove supplier relationship from here - it should be in PurchaseOrderItem
//   inventory          Inventory[]
//   purchaseOrderItems PurchaseOrderItem[]
//   saleItems          SaleItem[]

//   @@map("medicines")
// }
// ```

// ### 5. **Sale Model - Enhanced Tracking**
// **Suggested Modification**:
// ```prisma
// enum PaymentMode {
//   CASH
//   CARD
//   DIGITAL_WALLET
//   CREDIT
// }

// enum SaleStatus {
//   COMPLETED
//   REFUNDED
//   PARTIALLY_REFUNDED
// }

// model Sale {
//   id            Int         @id @default(autoincrement())
//   invoice_number String     @unique // Generate invoice numbers
//   pharmacy_id   Int
//   pharmacy      Pharmacy    @relation(fields: [pharmacy_id], references: [id])
//   cashier_id    Int         // Track who made the sale
//   cashier       User        @relation(fields: [cashier_id], references: [id])
//   customer_name String?
//   customer_phone String?
//   sale_date     DateTime    @default(now())
//   total_amount  Decimal
//   discount      Decimal     @default(0)
//   tax_amount    Decimal     @default(0)
//   payment_mode  PaymentMode
//   status        SaleStatus  @default(COMPLETED)
//   notes         String?

//   saleItems     SaleItem[]

//   @@map("sales")
// }
// ```

// ### 6. **Add Audit Trail Model**
// **New Addition**:
// ```prisma
// enum AuditAction {
//   CREATE
//   UPDATE
//   DELETE
//   SALE
//   PURCHASE
//   INVENTORY_ADJUSTMENT
// }

// model AuditLog {
//   id          Int         @id @default(autoincrement())
//   user_id     Int
//   user        User        @relation(fields: [user_id], references: [id])
//   action      AuditAction
//   table_name  String
//   record_id   Int
//   old_values  Json?       // Store old values for updates
//   new_values  Json?       // Store new values
//   timestamp   DateTime    @default(now())
//   ip_address  String?
//   user_agent  String?

//   @@map("audit_logs")
// }
// ```

// ## Key Improvements Summary:

// 1. **Clear Role Hierarchy**: Defined user roles with specific permissions
// 2. **Better Relationships**: Fixed ownership and foreign key relationships
// 3. **Enhanced Inventory**: Better tracking with batch numbers, cost/selling prices
// 4. **Audit Trail**: Complete system activity logging
// 5. **Data Integrity**: Added unique constraints and validation
// 6. **Business Logic**: Added fields for real-world pharmacy operations

// ## Recommended Permission Structure:

// - **SUPER_ADMIN**: Full system access
// - **PHARMACY_OWNER**: Manage owned pharmacies, view reports
// - **PHARMACY_MANAGER**: Full pharmacy operations, inventory management
// - **PHARMACIST**: Sales, inventory checks, customer service
// - **CASHIER**: Sales transactions only
// - **WAREHOUSE_MANAGER**: Warehouse inventory, purchase orders

// Would you like me to elaborate on any of these modifications or discuss the implementation approach?

// ****************************************************************************************
// ****************************************************************************************

// lets start step by step after we finish we test then go to the next step 
// tell me what do you want files to know from me data base and nest js to start the actual full coding for the files in the filament that we need 
// like the user and supplier the auth controller and service in the nest the jwt payload and validition function i will send them and tell me if you need further files or info to write the code whole for the step one so i can copy it and test it :
// data base user and supplier ( there is other tables in the system ) :
// enum UserRole {
//     PHARMACY_OWNER 
//     PHARMACIST 
// }
// model User {
//     id            Int            @id @default(autoincrement())
//     username      String
//     email         String         @unique
//     password_hash String
//     role          UserRole
//     created_at    DateTime       @default(now())
//     pharmacy_id   Int
//     Pharmacy      Pharmacy      @relation(fields: [pharmacy_id], references: [id])
//     Notifications Notification[]
// }
// model Pharmacy {
//     id             Int             @id @default(autoincrement())
//     name           String
//     address        String
//     contact_number String
//     owner_id       Int?            @unique 
//     Inventory      Inventory[]
//     PurchaseOrders PurchaseOrder[]
//     Sales          Sale[]
//     User           User[]
// }
// model Warehouse {
//     id             Int         @id @default(autoincrement())
//     name           String
//     address        String
//     owner_id       Int?        @unique 
//     contact_number String
//     Inventory      Inventory[]
//     supplier       Supplier[]
// }
// enum SupplierRole {
//     SUPPLIER_ADMIN
//     SUPPLIER_EMPLOYEE
// }
// model Supplier {
//     id             Int             @id @default(autoincrement())
//     name           String
//     email          String          @unique
//     password_hash  String
//     role           SupplierRole
//     contact_person String?
//     phone          String
//     address        String
//     Medicines      Medicine[]
//     PurchaseOrders PurchaseOrder[]
//     Invoices       Invoice[]
//     warehouseId    Int
//     Warehouse      Warehouse      @relation(fields: [warehouseId], references: [id])
// }
// auth controller :
// import { Body, Controller, Post } from '@nestjs/common';
// import { AuthService } from './auth.service';
// import { SignInDto, SignUpDto } from './dto';
// import {
//   SupplierSignInDto,
//   SupplierSignUpDto,
// } from './dto/supplier-signin.dto';
// @Controller('auth')
// export class AuthController {
//   constructor(private readonly authService: AuthService) {}
//   @Post('user/signup')
//   signupUser(@Body() dto: SignUpDto) {
//     return this.authService.signup(dto);
//   }
//   @Post('user/signin')
//   signinUser(@Body() dto: SignInDto) {
//     console.log(dto);
//     return this.authService.signin(dto);
//   }
//   @Post('supplier/signup')
//   signupSupplier(@Body() dto: SupplierSignUpDto) {
//     return this.authService.signupSupplier(dto);
//   }
//   @Post('supplier/signin')
//   signinSupplier(@Body() dto: SupplierSignInDto) {
//     return this.authService.signinSupplier(dto);
//   }
// }
// auth service :
// import { ForbiddenException, Injectable } from '@nestjs/common';
// import { PrismaService } from 'src/prisma/prisma.service';
// import { SignInDto, SignUpDto } from './dto';
// import * as argon from 'argon2';
// import { JwtService } from '@nestjs/jwt';
// import { ConfigService } from '@nestjs/config';
// import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';
// import {
//   SupplierSignInDto,
//   SupplierSignUpDto,
// } from './dto/supplier-signin.dto';
// @Injectable()
// export class AuthService {
//   constructor(
//     private prisma: PrismaService,
//     private jwt: JwtService,
//     private config: ConfigService,
//   ) {}
//   async signup(dto: SignUpDto) {
//     const hash = await argon.hash(dto.password);
//     try {
//       const pharmacy = await this.prisma.pharmacy.create({
//         data: {
//           name: `${dto.propertyName}'s Pharmacy`,
//           address: dto.address || 'N/A',
//           contact_number: dto.contact_number || 'N/A',
//         },
//       });
//       const user = await this.prisma.user.create({
//         data: {
//           username: dto.username,
//           email: dto.email,
//           password_hash: hash,
//           role: dto.role,
//           pharmacy_id: pharmacy.id,
//         },
//       });
//       await this.prisma.pharmacy.update({
//         where: { id: pharmacy.id },
//         data: { owner_id: user.id },
//       });
//       return 'created';
//     } catch (error) {
//       if (error instanceof PrismaClientKnownRequestError) {
//         if (error.code == 'P2002') {
//           throw new ForbiddenException('Credentials Taken');
//         }
//       }
//       throw error;
//     }
//   }
//   async signin(dto: SignInDto) {
//     const user = await this.prisma.user.findUnique({
//       where: {
//         email: dto.email,
//       },
//     });
//     if (!user) {
//       throw new ForbiddenException('Credentials incorrect');
//     }
//     if (!(await argon.verify(user.password_hash, dto.password))) {
//       throw new ForbiddenException('Credentials incorrect');
//     }
//     await this.prisma.pharmacy.findUnique({
//       where: { id: user.pharmacy_id },
//     });
//     return this.signToken(
//       user.id,
//       user.email,
//       user.role,
//       'user',
//       user.pharmacy_id,
//       null,
//     );
//   }
//   async signupSupplier(dto: SupplierSignUpDto) {
//     const hash = await argon.hash(dto.password);
//     try {
//       // Create warehouse first
//       const warehouse = await this.prisma.warehouse.create({
//         data: {
//           name: `${dto.propertyName}'s Warehouse`,
//           address: dto.warehouseAddress || 'N/A',
//           contact_number: dto.contact_number || 'N/A',
//         },
//       });
//       const supplier = await this.prisma.supplier.create({
//         data: {
//           name: dto.name,
//           email: dto.email,
//           password_hash: hash,
//           role: dto.role,
//           contact_person: dto.contact_person,
//           phone: dto.phone,
//           address: dto.address,
//           warehouseId: warehouse.id,
//         },
//       });
//       await this.prisma.warehouse.update({
//         where: { id: warehouse.id },
//         data: { owner_id: supplier.id },
//       });
//       return 'created';
//     } catch (error) {
//       if (
//         error instanceof PrismaClientKnownRequestError &&
//         error.code === 'P2002'
//       ) {
//         throw new ForbiddenException('Credential Taken');
//       }
//       throw error;
//     }
//   }
//   async signinSupplier(dto: SupplierSignInDto) {
//     const supplier = await this.prisma.supplier.findUnique({
//       where: { email: dto.email },
//     });
//     if (
//       !supplier ||
//       !(await argon.verify(supplier.password_hash, dto.password))
//     ) {
//       throw new ForbiddenException('Credentials incorrect');
//     }
//     const warehouse = await this.prisma.warehouse.findUnique({
//       where: { id: supplier.warehouseId },
//     });
//     return this.signToken(
//       supplier.id,
//       supplier.email,
//       supplier.role,
//       'supplier',
//       null,
//       warehouse?.id ?? null,
//     );
//   }
//   async signToken(
//     id: number,
//     email: string,
//     role: string,
//     accountType: 'user' | 'supplier',
//     pharmacy_id: number | null = null,
//     warehouse_id: number | null = null,
//   ): Promise<{ access_token: string }> {
//     const payload = {
//       id,
//       email,
//       role,
//       type: accountType,
//       pharmacy_id,
//       warehouse_id,
//     };
//     const token = await this.jwt.signAsync(payload, {
//       expiresIn: '1h',
//       secret: this.config.get('JWT_SECRET'),
//     });

//     return { access_token: token };
//   }
// }
// dtos:
// user :
// import { IsEmail, IsNotEmpty, IsEnum, IsOptional } from 'class-validator';
// import { UserRole } from '@prisma/client';
// export class SignUpDto {
//   @IsNotEmpty()
//   username: string;
//   @IsNotEmpty()
//   propertyName: string;
//   @IsNotEmpty()
//   address: string;
//   @IsNotEmpty()
//   contact_number: string;
//   @IsEmail()
//   email: string;
//   @IsNotEmpty()
//   password: string;
//   @IsEnum(UserRole)
//   role: UserRole;
//   @IsOptional()
//   pharmacy_id?: number;
// }
// export class SignInDto {
//   @IsEmail()
//   email: string;
//   @IsNotEmpty()
//   password: string;
// }
// supplier :
// import { IsEmail, IsNotEmpty, IsEnum, IsString } from 'class-validator';
// import { SupplierRole } from '@prisma/client';
// export class SupplierSignUpDto {
//   @IsNotEmpty()
//   name: string;
//   @IsNotEmpty()
//   contact_number: string;
//   @IsNotEmpty()
//   warehouseAddress: string;
//   @IsNotEmpty()
//   propertyName: string;
//   @IsEmail()
//   email: string;
//   @IsNotEmpty()
//   password: string;
//   @IsEnum(SupplierRole)
//   role: SupplierRole;
//   @IsString()
//   @IsNotEmpty()
//   phone: string;
//   contact_person?: string;
//   @IsNotEmpty()
//   address: string;
// }
// export class SupplierSignInDto {
//   @IsEmail()
//   email: string;
//   @IsNotEmpty()
//   password: string;
// }
// jwt :
// import { ExtractJwt, Strategy, StrategyOptions } from 'passport-jwt';
// import { PassportStrategy } from '@nestjs/passport';
// import { Injectable } from '@nestjs/common';
// import { ConfigService } from '@nestjs/config';
// import { PrismaService } from 'src/prisma/prisma.service';
// @Injectable()
// export class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {
//   constructor(
//     private readonly config: ConfigService,
//     private prisma: PrismaService,
//   ) {
//     const options: StrategyOptions = {
//       jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
//       secretOrKey: config.get<string>('JWT_SECRET', 'fallback-secret'), // Ensure it's defined
//     }
//     super(options);
//   }
//   async validate(payload: { id: number; email: string }) {
//     const user = await this.prisma.user.findUnique({
//       where: { id: payload.id },
//     });
//     if (user) {
//       const { password_hash, ...rest } = user;
//       return { ...rest, type: 'USER' };
//     }
//     const supplier = await this.prisma.supplier.findUnique({
//       where: { id: payload.id },
//     });
//     if (supplier) {
//       const { password_hash, ...rest } = supplier;
//       return { ...rest, type: 'SUPPLIER' };
//     }
//     return null;
//   }
// }
// payload:
// export interface UserJwtPayload {
//   id: number;
//   email: string;
//   pharmacy_id: number;
//   warehouse_id: number;
//   role: string;
//   iat?: number;
//   exp?: number;
// }
