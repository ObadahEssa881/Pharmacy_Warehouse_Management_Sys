// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int            @id @default(autoincrement())
  username      String         @unique
  password_hash String
  role          String
  created_at    DateTime       @default(now())
  pharmacy_id   Int?
  Pharmacy      Pharmacy?      @relation(fields: [pharmacy_id], references: [pharmacy_id])
  Notifications Notification[]
}

model Pharmacy {
  pharmacy_id    Int             @id @default(autoincrement())
  name           String
  address        String
  contact_number String
  owner_id       Int             @unique // Ensure one-to-one relationship
  Inventory      Inventory[]
  PurchaseOrders PurchaseOrder[]
  Sales          Sale[]
  User           User[]
}

model Warehouse {
  warehouse_id   Int         @id @default(autoincrement())
  name           String
  address        String
  contact_number String
  Inventory      Inventory[]
}

model Supplier {
  supplier_id    Int             @id @default(autoincrement())
  name           String
  contact_person String?
  phone          String
  email          String          @unique
  address        String
  Medicines      Medicine[]
  PurchaseOrders PurchaseOrder[]
  Invoices       Invoice[]
}

model Category {
  category_id Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  Medicines   Medicine[]
}

model Type {
  type_id   Int        @id @default(autoincrement())
  name      String     @unique
  Medicines Medicine[]
}

model Company {
  company_id     Int        @id @default(autoincrement())
  name           String     @unique
  contact_person String?
  phone          String
  email          String     @unique
  address        String
  Medicines      Medicine[]
}

model Medicine {
  medicine_id        Int                 @id @default(autoincrement())
  name               String
  scientific_name    String
  category_id        Int
  category           Category            @relation(fields: [category_id], references: [category_id])
  company_id         Int
  company            Company             @relation(fields: [company_id], references: [company_id])
  unit_price         Decimal
  supplier_id        Int
  supplier           Supplier            @relation(fields: [supplier_id], references: [supplier_id])
  Inventory          Inventory[]
  PurchaseOrderItems PurchaseOrderItem[]
  SaleItems          SaleItem[]
  Type               Type?               @relation(fields: [typeType_id], references: [type_id])
  typeType_id        Int?
}

model Inventory {
  inventory_id  Int        @id @default(autoincrement())
  medicine_id   Int
  medicine      Medicine   @relation(fields: [medicine_id], references: [medicine_id])
  location_type String
  location_id   Int
  quantity      Int
  expiry_date   DateTime
  last_updated  DateTime   @default(now())
  pharmacy      Pharmacy?  @relation(fields: [location_id], references: [pharmacy_id], map: "Inventory_pharmacy_fkey") // Unique constraint name
  warehouse     Warehouse? @relation(fields: [location_id], references: [warehouse_id], map: "Inventory_warehouse_fkey") // Unique constraint name
}

model PurchaseOrder {
  order_id           Int                 @id @default(autoincrement())
  supplier_id        Int
  supplier           Supplier            @relation(fields: [supplier_id], references: [supplier_id])
  pharmacy_id        Int
  pharmacy           Pharmacy            @relation(fields: [pharmacy_id], references: [pharmacy_id])
  order_date         DateTime            @default(now())
  delivery_date      DateTime?
  status             String
  Invoice            Invoice?
  PurchaseOrderItems PurchaseOrderItem[]
}

model PurchaseOrderItem {
  order_item_id Int           @id @default(autoincrement())
  order_id      Int
  order         PurchaseOrder @relation(fields: [order_id], references: [order_id])
  medicine_id   Int
  medicine      Medicine      @relation(fields: [medicine_id], references: [medicine_id])
  quantity      Int
  unit_price    Decimal
}

model Invoice {
  invoice_id     Int           @id @default(autoincrement())
  order_id       Int           @unique
  order          PurchaseOrder @relation(fields: [order_id], references: [order_id])
  supplier_id    Int
  supplier       Supplier      @relation(fields: [supplier_id], references: [supplier_id])
  invoice_date   DateTime      @default(now())
  total_amount   Decimal
  payment_status String
}

model Sale {
  sale_id       Int        @id @default(autoincrement())
  pharmacy_id   Int
  pharmacy      Pharmacy   @relation(fields: [pharmacy_id], references: [pharmacy_id])
  customer_name String?
  sale_date     DateTime   @default(now())
  total_amount  Decimal
  payment_mode  String
  SaleItems     SaleItem[]
}

model SaleItem {
  sale_item_id Int      @id @default(autoincrement())
  sale_id      Int
  sale         Sale     @relation(fields: [sale_id], references: [sale_id])
  medicine_id  Int
  medicine     Medicine @relation(fields: [medicine_id], references: [medicine_id])
  quantity     Int
  unit_price   Decimal
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_id         Int
  user            User     @relation(fields: [user_id], references: [user_id])
  message         String
  type            String
  created_at      DateTime @default(now())
  is_read         Boolean  @default(false)
}
